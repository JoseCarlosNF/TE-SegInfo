#!/usr/bin/python3
""" Implementa√ß√£o de um Gerador de N√∫meros Pseudoaleat√≥rios """

from secrets import SystemRandom
import random

"""
    # secrets:
        Generate cryptographically strong pseudo-random numbers suitable for
        managing secrets such as account authentication, tokens, and similar.

    # secrets.SystemRandom:
        Alternate random number generator using sources provided
        by the operating system (such as /dev/urandom on Unix or
        CryptGenRandom on Windows).
        Not available on all systems (see os.urandom() for details).

    ! Considera√ß√µes:
        Como pode-se notar, a biblioteca utiliza como pool de entropia as fontes fornecidas pelo sistema.
        -   /dev/urandom :: Unix
        - CryptGenRandom :: MS-Windows
"""

# üö® Gerador randomico SEGURO
generator = SystemRandom()
print(generator.getrandbits(1024)) # Gera um inteiro de 1024-bits
print(generator.random())

# üïπ Gerador randomico USUAL do Python
print(random.random())

""" 
! Conclus√£o:
    Seguindo as documenta√ß√µes, ambos os geradores utilizam a mesma fonte de entropia.

    ? Podemos ent√£o afirmar que o PRNG built-in do Python √© seguro?
"""
